/*
Jason Zhang
*/
#include <iostream>
#include <cstring>
#include "Node.h"
#include "List.h"

using namespace std;

List::List(){
  head = NULL;
}

void List::push(char* newVal){
  push_end(head, newVal);
  return;
}

char* List::q_pop(){
  if(head == NULL){
    return NULL;
  }
  char* val = copy(head->getVal());
  Node* temp = head->getNext();
  delete head;
  head = temp;
  return val;
}
char* List::s_pop(){
  return get_end(head, true);  
}
char* List::q_peek(){
  if(head == NULL){
    return NULL;
  }
  return head->getVal();
}
char* List::s_peek(){
  return get_end(head, false);
}
char* List::get_end(Node* &current, bool del){
  if(head == NULL){
    return NULL;
  }
  if(current->getNext() == NULL){
    char* val = copy(current->getVal());
    if(del){
      current = NULL;
      delete current;
    }
    return val;
  }
  if(current->getNext()->getNext() == NULL){
    char* val = copy(current->getNext()->getVal());
    if(del){
      current->setNext(NULL);
      delete current->getNext();
    }
    return val;
  }
  Node* next = current->getNext();
  get_end(next, del);
}
void List::push_end(Node* &current, char* in){
  cout<<"geeee"<<endl;
  if(current == NULL){
    cout<<"reeee"<<endl;
    current = new Node (in);
    return;
  }
  if(current->getNext() == NULL){
    cout<<"teee"<<endl;
    current->setNext(new Node(in));
    return;
  }
  Node* next = current->getNext();
  push_end(next, in);
}

char* List::copy(char* in){
  char* out = new char[strlen(in)+1];
  strcpy(out, in);
  return out;
}
List::~List(){
  delete head;
}
